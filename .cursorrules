# Cursor Rules for Swift Package Projects

# Project Goals: MCP Template
This project aims to create a simple command line executable and Swift package to make creating MCPs (Model Control Protocol) for Mac very easy. The project will eventually support:
1. Command line stdio for direct MCP interaction
2. Command line stdio → standalone Mac app via Bonjour for networked MCP communication
3. SSE server in a Package → example command line app for SSE-based MCP

## Project Structure
- Package Name: mcp-template
- Swift Version: 6.0
- Platforms: macOS 14+

### Targets:
1. EasyMCP (Library)
   - Purpose: Swift library for easy integration with the MCP protocol
   - Dependencies: mcp-swift-sdk (MCP module)
   - Key Files: 
     - Sources/EasyMCP/EasyMCP.swift - Main implementation with basic skeleton

2. mcpexample (Executable)
   - Purpose: Command-line example using EasyMCP library
   - Dependencies: EasyMCP, ArgumentParser
   - Key Files:
     - Sources/mcpexample/main.swift - CLI implementation with ArgumentParser

3. EasyMCPTests (Test Target)
   - Purpose: Tests for the EasyMCP library
   - Key Files:
     - Tests/EasyMCPTests/EasyMCPTests.swift - Test cases for EasyMCP

### Dependencies:
- swift-argument-parser (1.3.0+) - Used for CLI argument handling
- mcp-swift-sdk (main branch) - Core MCP implementation from loopwork-ai

### Current Implementation Status:
- Basic package structure is set up
- Minimal implementation with placeholders
- Command line hello example is working
- No actual MCP functionality implemented yet

## Main Workspace: mcp-template
- A basic Swift package template using Swift 6.0
- Currently minimal with no implementation code
- Located at: /Users/adamwulf/Developer/swift-packages/mcp-template

## Related Projects (for reference only):

### 1. hunch
Located at: /Users/adamwulf/Developer/swift-packages/hunch
Description: A Swift package with CLI tool and library for interacting with various APIs
Key components:
  - HunchKit: A library for API interactions, rendering, and data handling
  - hunch: A CLI executable with various commands
Dependencies:
  - swift-argument-parser
  - SwiftToolbox
  - Logfmt
  - ytt (YouTube Transcript)
Structure:
  - APIs (NotionAPI, HunchAPI)
  - Helpers (Renderers, Logging, Extensions)
  - Lists (BlockList, DatabaseList, PageList)
  - NotionItems (various Notion-related items)
  - Commands (Activity, Blocks, Database, Export, Page)
Files:
  - hunch/Sources/hunch/Commands/PageCommand.swift
  - hunch/Sources/hunch/Hunch.swift
  - hunch/Sources/HunchKit/APIs/HunchAPI.swift
  - hunch/Sources/HunchKit/APIs/NotionAPI.swift
  - hunch/Sources/HunchKit/Helpers/FileDownloader.swift
  - hunch/Sources/HunchKit/Helpers/FullJSONRenderer.swift
  - hunch/Sources/HunchKit/Helpers/IDRenderer.swift
  - hunch/Sources/HunchKit/Helpers/Logging.swift
  - hunch/Sources/HunchKit/Helpers/MarkdownRenderer.swift
  - hunch/Sources/HunchKit/Helpers/Renderer.swift
  - hunch/Sources/HunchKit/Helpers/SmallJSONRenderer.swift
  - hunch/Sources/HunchKit/Helpers/URLSession+Extensions.swift
  - hunch/Sources/HunchKit/Lists/BlockList.swift
  - hunch/Sources/HunchKit/Lists/DatabaseList.swift
  - hunch/Sources/HunchKit/Lists/PageList.swift


### 2. mcp-swift-sdk
Located at: /Users/adamwulf/Developer/swift-packages/mcp-swift-sdk
Description: A Swift SDK for MCP (Model Control Protocol) implementation
Key components:
  - Base (Error, ID, Lifecycle, Messages, Transports, Value, Versioning)
  - Client (Client implementation with Info, Capabilities structures)
  - Server (Prompts, Resources, Server, Tools)
  - Extensions (Data extensions)
Dependencies:
  - swift-system
  - swift-log
Files:
  - mcp-swift-sdk/Package.swift
  - mcp-swift-sdk/Sources/MCP/Base/Error.swift
  - mcp-swift-sdk/Sources/MCP/Base/ID.swift
  - mcp-swift-sdk/Sources/MCP/Base/Lifecycle.swift
  - mcp-swift-sdk/Sources/MCP/Base/Messages.swift
  - mcp-swift-sdk/Sources/MCP/Base/Transports.swift
  - mcp-swift-sdk/Sources/MCP/Base/Utilities/Ping.swift
  - mcp-swift-sdk/Sources/MCP/Base/Value.swift
  - mcp-swift-sdk/Sources/MCP/Base/Versioning.swift
  - mcp-swift-sdk/Sources/MCP/Client/Client.swift
  - mcp-swift-sdk/Sources/MCP/Extensions/Data+Extensions.swift
  - mcp-swift-sdk/Sources/MCP/Server/Prompts.swift
  - mcp-swift-sdk/Sources/MCP/Server/Resources.swift
  - mcp-swift-sdk/Sources/MCP/Server/Server.swift
  - mcp-swift-sdk/Sources/MCP/Server/Tools.swift

### 3. iMCP
Located at: /Users/adamwulf/Developer/swift/iMCP
Description: A macOS app that implements the Model Control Protocol (MCP) for connecting macOS system data with AI tools like Claude Desktop
Key components:
  - iMCP.app: The main macOS application with UI for configuration and permissions management
  - imcp-server: A CLI executable bundled with the app that handles stdin/stdout MCP communication
  - App directory: Contains the main app implementation with SwiftUI views and service managers
  - CLI directory: Contains the command-line interface implementation
  - Services: Calendar, Contacts, Location, Messages, Reminders, and Weather services
Architecture:
  - Uses Bonjour for discovery between the CLI and app components
  - Implements the MCP protocol for AI tool integration
  - Handles Apple system permissions for each service
  - Returns data in JSON-LD format
Xcode targets:
  - iMCP: The main app bundle
  - imcp-server: The CLI executable

## Platforms:
  - macOS 14+
  - iOS 17+

This context file helps AI tools understand the relationship between these projects
and their components to better assist with development tasks. 