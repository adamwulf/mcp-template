# Cursor Rules for Swift Package Projects
- Before making any changes or edits, talk through and mention your plan for the changes.

# Project Goals: MCP Template
This project aims to create a simple command line executable and Swift package to make creating MCPs (Model Control Protocol) for Mac very easy. The project will eventually support:
1. Command line stdio for direct MCP interaction
2. Command line stdio → standalone Mac app via Bonjour for networked MCP communication
3. SSE server in a Package → example command line app for SSE-based MCP

## Project Structure
- Package Name: mcp-template
- Swift Version: 6.0
- Platforms: macOS 14+

### EasyMCP Targets:
1. EasyMCP (Library)
   - Purpose: Swift library for easy integration with the MCP protocol
   - Dependencies: mcp-swift-sdk (MCP module)
   - Key Files: 
     - Sources/EasyMCP/EasyMCP.swift - Main implementation with basic skeleton

2. mcpexample (Executable)
   - Purpose: Command-line example using EasyMCP library
   - Dependencies: EasyMCP, ArgumentParser
   - Key Files:
     - Sources/mcpexample/main.swift - CLI implementation with ArgumentParser

3. EasyMCPTests (Test Target)
   - Purpose: Tests for the EasyMCP library
   - Key Files:
     - Tests/EasyMCPTests/EasyMCPTests.swift - Test cases for EasyMCP

### MCPExample Targets:

The MCPExample targets demonstrate:
  1. How to use EasyMCP to build a functional MCP server (via mcp-helper)
  2. How to use a running Mac app (MCPExample) as the "brains" of that MCP server
  3. How to establish bidirectional communication between a GUI app and a command-line MCP server

1. MCPExample (macOS App)
   - Purpose: macOS SwiftUI application that demonstrates MCP integration
   - Key Files:
     - MCPExample/MCPExample/MCPExampleApp.swift - Main app implementation with PipeReader
     - MCPExample/MCPExample/ContentView.swift - SwiftUI interface
     - MCPExample/MCPExample/BuildSettings.swift - Shared build configuration

2. mcp-helper (Command Line Tool)
   - Purpose: Background helper process that runs the actual MCP server
   - Dependencies: EasyMCP, ArgumentParser
   - Key Files:
     - MCPExample/mcp-helper/MCPHelper.swift - Command line implementation
     - MCPExample/mcp-helper/BuildSettings.swift - Shared build configuration

3. Shared Folder (Common Code)
   - Purpose: Contains code shared between MCPExample and mcp-helper
   - Located at: MCPExample/Shared/
   - Key Files:
     - ReadPipe.swift, WritePipe.swift - Core pipe communication classes
     - PipeTestHelpers.swift - Testing utilities for pipe communication
     - PipeConstants.swift - Shared constants for pipe paths
     - Logging.swift - Common logging functionality
     - FileManager+Pipe.swift - FileManager extension for pipe operations

### Dependencies:
- swift-argument-parser (1.3.0+) - Used for CLI argument handling
- mcp-swift-sdk (main branch) - Core MCP implementation from loopwork-ai

### Current Implementation Status:
- Basic package structure is set up
- Minimal implementation with placeholders
- Command line hello example is working
- No actual MCP functionality implemented yet

## Main Workspace: mcp-template
- A basic Swift package template using Swift 6.0
- Currently minimal with no implementation code
- Located at: /Users/adamwulf/Developer/swift-packages/mcp-template

## Communication Mechanism
- MCPExample and mcp-helper communicate via named pipes (FIFOs) in a shared app group container
- This enables inter-process communication between the main app and helper process
- Access to the pipes is managed through the shared app group container's security context

### MCPExample/Shared Components:
- A shared code directory containing pipe communication utilities:
  - ReadPipe.swift - Class for creating and reading from named pipes
  - WritePipe.swift - Class for creating and writing to named pipes
  - PipeTestHelpers.swift - Utility class for testing pipe functionality
  - PipeConstants.swift - Constants for pipe paths in the shared container
  - Logging.swift - Logging utilities
  - FileManager+Pipe.swift - FileManager extension for pipe operations
