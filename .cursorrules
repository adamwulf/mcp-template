# Cursor Rules for Swift Package Projects
- Before making any changes or edits, talk through and mention your plan for the changes.

# Project Goals: MCP Template
This project aims to create a simple command line executable and Swift package to make creating MCPs (Model Control Protocol) for Mac very easy. The project will eventually support:
1. Command line stdio for direct MCP interaction
2. Command line stdio → standalone Mac app via Bonjour for networked MCP communication
3. SSE server in a Package → example command line app for SSE-based MCP

## Project Structure
- Package Name: mcp-template
- Swift Version: 6.0
- Platforms: macOS 14+

### Targets:
1. EasyMCP (Library)
   - Purpose: Swift library for easy integration with the MCP protocol
   - Dependencies: mcp-swift-sdk (MCP module)
   - Key Files: 
     - Sources/EasyMCP/EasyMCP.swift - Main implementation with basic skeleton

2. mcpexample (Executable)
   - Purpose: Command-line example using EasyMCP library
   - Dependencies: EasyMCP, ArgumentParser
   - Key Files:
     - Sources/mcpexample/main.swift - CLI implementation with ArgumentParser

3. EasyMCPTests (Test Target)
   - Purpose: Tests for the EasyMCP library
   - Key Files:
     - Tests/EasyMCPTests/EasyMCPTests.swift - Test cases for EasyMCP

### Dependencies:
- swift-argument-parser (1.3.0+) - Used for CLI argument handling
- mcp-swift-sdk (main branch) - Core MCP implementation from loopwork-ai

### Current Implementation Status:
- Basic package structure is set up
- Minimal implementation with placeholders
- Command line hello example is working
- No actual MCP functionality implemented yet

## Main Workspace: mcp-template
- A basic Swift package template using Swift 6.0
- Currently minimal with no implementation code
- Located at: /Users/adamwulf/Developer/swift-packages/mcp-template

## Related Projects (for reference only):

These projects are included in the reference-code folder for inspiration and guidance:

### 1. mcp-swift-sdk
- Description: Official Swift implementation of the Model Context Protocol (MCP)
- Repository: https://github.com/loopwork-ai/mcp-swift-sdk
- Structure:
  - Package Type: Swift Package (Library)
  - Swift Version: 6.0
  - Platforms: macOS 14+, iOS 17+
  - Main Target: MCP (Library)
  - Dependencies: swift-system, swift-log
- Key Features:
  - Core MCP protocol implementation
  - Client and Server implementations
  - StdioTransport for command-line interaction
  - Support for tools, resources, and prompts via MCP
- Usage Examples:
  - Basic client setup for connecting to MCP servers
  - Server implementation for handling MCP requests
  - Working with tools, resources, and prompts

### 2. iMCP
- Description: macOS app for connecting digital life with AI via MCP
- Repository: https://iMCP.app
- Structure:
  - Project Type: Xcode Project (App + CLI)
  - Components:
    - macOS App: Full-featured MCP server
    - CLI: Command-line interface to the MCP server
  - Organization:
    - App/: Main SwiftUI application
    - App/Services/: Core functionality services
    - App/Integrations/: Various MCP integrations
    - CLI/: Command-line implementation
- Key Features:
  - Calendar integration
  - Contacts access
  - Location services
  - Messages access
  - Reminders integration
  - SwiftUI-based user interface

### 3. hunch
- Description: Swift package with library and executable components
- Structure:
  - Package Type: Swift Package (Library + Executable)
  - Swift Version: 5.9
  - Platforms: macOS 13+, iOS 16+
  - Targets:
    - HunchKit: Library target with core functionality
    - hunch: Executable target using ArgumentParser
    - HunchKitTests: Test target for the library
  - Dependencies:
    - swift-argument-parser: CLI argument handling
    - SwiftToolbox, Logfmt, YouTubeTranscriptKit: Utility libraries
- Features:
  - Example of a well-structured Swift package with both library and executable
  - Shows proper separation of concerns between library and CLI code
  - Demonstrates how to use ArgumentParser for command-line tools