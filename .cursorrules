# Cursor Rules for Swift Package Projects
- Before making any changes or edits, talk through and mention your plan for the changes.

# Project Goals: MCP Template
This project aims to create a simple command line executable and Swift package to make creating MCPs (Model Control Protocol) for Mac very easy. The project will eventually support:
1. Command line stdio for direct MCP interaction
2. Command line stdio → standalone Mac app via Bonjour for networked MCP communication
3. SSE server in a Package → example command line app for SSE-based MCP

## Project Structure
- Package Name: mcp-template
- Swift Version: 6.0
- Platforms: macOS 15+, iOS 17+, macCatalyst 17+

### Package Targets:
1. EasyMCP (Library)
   - Purpose: Swift library for easy integration with the MCP protocol
   - Dependencies: mcp-swift-sdk (MCP module)
   - Key Files: 
     - Sources/EasyMCP/EasyMCP.swift - Main implementation that handles MCP server lifecycle, tool registration, and method handlers for listing and calling tools
     - Sources/EasyMCP/Logging.swift - Utility functions for structured logging with error, warning, and info levels

2. EasyMacMCP (Library)
   - Purpose: Mac-specific implementation for MCP with pipe communication supporting multiple concurrent MCP servers
   - Dependencies: EasyMCP
   - Key Files:
     - Sources/EasyMacMCP/MCPTools.swift - Wrapper for MCP tools that manages sending requests through pipes and handles responses with timeouts
     - Sources/EasyMacMCP/MCPProtocols.swift - Defines protocols for MCP communication
     - Sources/EasyMacMCP/MCPResponseReader.swift - Asynchronous reader that continuously reads responses from a server-specific pipe and dispatches them to ResponseManager
     - Sources/EasyMacMCP/ResponseManager.swift - Actor that coordinates requests and responses, manages timeouts, and resolves async continuations for a specific MCP server
     - Sources/EasyMacMCP/ReadPipe.swift - Comprehensive implementation for creating, opening, and reading from named pipes with error handling
     - Sources/EasyMacMCP/WritePipe.swift - Counterpart to ReadPipe for creating, opening, and writing to named pipes with error handling
     - Sources/EasyMacMCP/PipeProtocols.swift - Defines protocol interfaces for PipeReadable and PipeWritable to allow mocking for testing
     - Sources/EasyMacMCP/PipeTestHelpers.swift - Utility functions to test pipe writing/reading with synchronous and asynchronous options
     - Sources/EasyMacMCP/FileManager+Pipe.swift - FileManager extension to check if a URL points to a named pipe using stat() system call
     - Sources/EasyMacMCP/Logging.swift - Mac-specific logging utilities with error, warning, and info levels that print to stderr/stdout

3. mcpexample (Executable)
   - Purpose: Command-line example using EasyMCP library
   - Dependencies: EasyMCP, ArgumentParser
   - Key Files:
     - Sources/mcpexample/MCPExample.swift - CLI implementation with ArgumentParser that demonstrates how to create and register MCP tools

4. EasyMCPTests (Test Target)
   - Purpose: Tests for the EasyMCP library
   - Key Files:
     - Tests/EasyMCPTests/EasyMCPTests.swift - Unit tests for the EasyMCP implementation to verify server startup and tool registration
     - Tests/EasyMCPTests/MCPResponseReaderTests.swift - Tests for MCPResponseReader class
     - Tests/EasyMCPTests/ResponseManagerTests.swift - Tests for ResponseManager class

5. EasyMacMCPTests (Test Target)
   - Purpose: Tests for the EasyMacMCP library
   - Key Files:
     - Tests/EasyMacMCPTests/MCPToolsTests.swift - Tests for MCPTools that verify hello tools work correctly and handle timeouts
     - Tests/EasyMacMCPTests/MCPResponseReaderTests.swift - Tests for MCPResponseReader to ensure proper parsing and handling of responses
     - Tests/EasyMacMCPTests/ResponseManagerTests.swift - Tests for ResponseManager that verify response matching, timeout handling, and cancellation
     - Tests/EasyMacMCPTests/PipeConstants.swift - Constants for pipe paths used in testing
     - Tests/EasyMacMCPTests/MockPipe.swift - Mock implementations of PipeReadable and PipeWritable interfaces for unit testing

### MCPExample Targets:

The MCPExample targets demonstrate:
  1. How to use EasyMCP and EasyMacMCP to build a functional MCP server (via mcp-helper)
  2. How to use a running Mac app (MCPExample) as the "brains" that can connect to multiple MCP servers
  3. How to establish bidirectional communication between a GUI app and multiple command-line MCP servers

1. MCPExample (macOS App)
   - Purpose: macOS SwiftUI application that demonstrates MCP integration with multiple helpers
   - Dependencies: EasyMacMCP
   - Key Files:
     - MCPExample/MCPExample/MCPExampleApp.swift - Main app entry point
     - MCPExample/MCPExample/MCPMacApp.swift - Main implementation with DebugHelperPipeReader that detects new MCP server connections
     - MCPExample/MCPExample/ContentView.swift - SwiftUI interface with controls to test pipe communication and display messages
     - MCPExample/MCPExample/BuildSettings.swift - Shared build configuration including app group identifier for shared container access

2. mcp-helper (Command Line Tool)
   - Purpose: Background helper process that runs the actual MCP server (can be launched multiple times)
   - Dependencies: EasyMacMCP, ArgumentParser
   - Key Files:
     - MCPExample/mcp-helper/MCPHelper.swift - Command line implementation that initializes MCP server with a unique helper ID
     - MCPExample/mcp-helper/BuildSettings.swift - Shared build configuration with constants for app group identifier and bundle IDs

3. Shared Folder (Common Code)
   - Purpose: Contains code shared between MCPExample and mcp-helper
   - Located at: MCPExample/Shared/
   - Key Files:
     - PipeConstants.swift - Defines paths for the central request pipe and helper-specific response pipes
     - MCPRequest.swift - Defines tool request types (initialize, deinitialize, helloWorld, helloPerson) sent from helpers to app with helperId for server identification
     - MCPResponse.swift - Defines response types sent from app back to helpers, with properties to extract helperId and messageId for routing

### Mac App Specific Components:
   - Located at: MCPExample/MCPExample/
   - Key Files:
     - HostRequestPipe.swift - Actor that wraps ReadPipe for receiving requests from MCP helpers
     - HostResponsePipe.swift - Actor that wraps WritePipe for sending responses to specific MCP helpers

### Helper Specific Components:
   - Located at: MCPExample/mcp-helper/
   - Key Files:
     - HelperRequestPipe.swift - Actor that wraps WritePipe for sending requests from helpers to the Mac app
     - HelperResponsePipe.swift - Actor that wraps ReadPipe for receiving responses from the Mac app

### Dependencies:
- swift-argument-parser (1.3.0+) - Used for CLI argument handling
- mcp-swift-sdk (main branch) - Core MCP implementation from modelcontextprotocol/swift-sdk

### Current Implementation Status:
- Package structure fully implemented with EasyMCP and EasyMacMCP targets
- Pipe communication architecture updated to support multiple concurrent MCP servers
- Implemented role-specific pipe actors (HostRequestPipe, HostResponsePipe, HelperRequestPipe, HelperResponsePipe)
- Communication follows hub-and-spoke model with central request pipe and helper-specific response pipes
- Basic MCP functionality implemented with helloWorld and helloPerson examples

## Communication Mechanism
- MCPExample and mcp-helper communicate via named pipes (FIFOs) in a shared app group container
- The communication follows a hub-and-spoke pattern:
  - One centralized pipe for all MCP servers to write to the Mac app (many-to-one) via HelperRequestPipe/HostRequestPipe
  - Individual dedicated pipes for the Mac app to respond to each specific MCP server (one-to-many) via HostResponsePipe/HelperResponsePipe
- Flow:
  1. Each MCP server instance launches with a unique helperId
  2. The server sends an initialize() request via the central request pipe to the Mac app
  3. Mac app receives this request and recognizes the new server by its helperId
  4. Mac app creates and writes to a dedicated response pipe named with the helperId
  5. Each MCP server reads from its own dedicated response pipe, avoiding contention
- This architecture enables the Mac app to communicate with multiple MCP server instances simultaneously
